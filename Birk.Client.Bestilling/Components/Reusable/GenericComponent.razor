@inherits BaseComponent;

@DynamicFragment

@code {
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public string Placeholder { get; set; }
    
    [Parameter]
    public string BindValue { get; set; }


    private RenderFragment DynamicFragment;

    private RenderFragment CreateComponent() => builder =>
    {
        if (GuiType == Enums.GuiType.Title || GuiType == Enums.GuiType.Label)
        {
            builder.OpenElement(1, "div");
            builder.AddAttribute(2, "class", CssClass);
            builder.AddContent(3, (MarkupString)Items[0]);
        }
        else if (GuiType == Enums.GuiType.Input)
        {
            builder.OpenElement(1, "input");
            builder.AddMultipleAttributes(2, 
                new Dictionary<string, object>
                {
                    { "class", CssClass },
                    { "placeholder", Placeholder },
                    { "bind-value", BindValue },
                    { "oninput", EventCallback.Factory.Create(this, OnInputValueChanged) }
                });
        }
        else if (GuiType == Enums.GuiType.Dropdown)
        {
            builder.OpenElement(1, "MudAutocomplete");
            builder.AddMultipleAttributes(2, 
                new Dictionary<string, object>
                {
                    { "class", CssClass },
                    { "placeholder", Placeholder }
                });
        }
        else if (GuiType == Enums.GuiType.Button)
        {
            builder.OpenElement(1, "button");
            builder.AddMultipleAttributes(2,
                new Dictionary<string, object>
                    {
                        { "class", CssClass }
                    });
            builder.AddContent(3, (MarkupString)Items[0]);
        }

        builder.CloseElement();
    };

    protected override void OnInitialized()
    {
        DynamicFragment = CreateComponent();
    }

    private void OnInputValueChanged(ChangeEventArgs args)
    {
        BindValue = args.Value?.ToString();
        ValueChanged.InvokeAsync(BindValue);
    }
}