@using Birk.Client.Bestilling.Components.Enums;
@using Birk.Client.Bestilling.Utils.Constants;
@using Birk.Client.Bestilling.Utils.Helpers;
@using Microsoft.AspNetCore.Components;

@inherits BaseComponent;

@DynamicFragment

@code {
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public EventCallback<bool> OnCheck { get; set; }

    [Parameter]
    public bool Checked { get; set; }

    private string _buildingPlaceholder => StringHelper.BuildPlaceholder(Language.NO[$"{Placeholder}Placeholder"]);
    
    private RenderFragment DynamicFragment;

    private string _inputValue { get; set; }

    private RenderFragment CreateComponent() => builder =>
    {
        if (GuiType == GuiType.Title || GuiType == GuiType.Label)
        {
            builder.OpenElement(1, "div");
            builder.AddAttribute(2, "class", CssClass);
            builder.AddContent(3, (MarkupString)BuildingContent);
        }

        else if (GuiType == GuiType.Input)
        {
            builder.OpenElement(1, "input");
            builder.AddMultipleAttributes(2, 
                new Dictionary<string, object>
                {
                    { "class", CssClass },
                    { "placeholder", _buildingPlaceholder },
                    // Event triggered on content of input being changed
                    { "value", _inputValue },
                    { "bind-value", _inputValue },
                    { "oninput", EventCallback.Factory.Create(this, OnInputValueChanged) },
                    // Event triggered on quit input (ex. copy/paste _inputValue value and click directly on Søk button)
                    // Ref: https://stackoverflow.com/questions/65803149/blazor-onchange-event
                    { "bind-value:event", "onchange" },
                    { "onchange", EventCallback.Factory.Create(this, OnBlurValueChanged) }
                });
        }

        else if (GuiType == GuiType.Dropdown)
        {
            builder.OpenElement(1, "MudAutocomplete");
            builder.AddMultipleAttributes(2, 
                new Dictionary<string, object>
                {
                    { "class", CssClass },
                    { "placeholder", _buildingPlaceholder }
                    //{ "ref", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck(DropdownElement) }
                });
        }

        else if (GuiType == GuiType.Button)
        {
            builder.OpenElement(1, "button");
            builder.AddMultipleAttributes(2,
                new Dictionary<string, object>
                {
                    { "class", CssClass },
                    { "onclick", EventCallback.Factory.Create(this, OnClick) }
                });
            builder.AddContent(3, (MarkupString)BuildingContent);
        }

        else if (GuiType == GuiType.CheckBox)
        {
            builder.OpenElement(1, "label");
            builder.AddAttribute(2, "class", "container");
            builder.AddContent(3, BuildingContent);

            builder.OpenElement(4, "input");
            builder.AddAttribute(5, "type", "checkbox");
            builder.AddAttribute(6, "class", "buf-checkbox__input");
            builder.AddAttribute(7, "checked", Checked);
            builder.AddAttribute(8, "onchange", EventCallback.Factory.Create(this, HandleCheck));
            builder.CloseElement();

            builder.OpenElement(9, "span");
            builder.AddAttribute(10, "class", "checkmark");
            builder.CloseElement();
        }

        builder.CloseElement(); // close the container div
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DynamicFragment = CreateComponent();
    }

    private void OnBlurValueChanged(ChangeEventArgs args)
    {
        _inputValue = args.Value?.ToString();
        ValueChanged.InvokeAsync(_inputValue);
    }

    private void OnInputValueChanged(ChangeEventArgs args)
    {
        _inputValue = args.Value?.ToString();
        ValueChanged.InvokeAsync(_inputValue);
    }

    private async Task HandleCheck(ChangeEventArgs args)
    {
        if (args.Value is bool checkedValue)
        {
            Checked = checkedValue;
            await OnCheck.InvokeAsync(checkedValue);
        }
    }

    private async Task HandleClick(MouseEventArgs e)
    {
        await OnClick.InvokeAsync(e);
    }

    public void Reset()
    {
        _inputValue = "";
        ValueChanged.InvokeAsync(_inputValue);
    }
}