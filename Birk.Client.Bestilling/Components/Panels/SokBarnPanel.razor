@using Birk.Client.Bestilling.Components.Enums;
@using Birk.Client.Bestilling.Components.Reusable
@using Birk.Client.Bestilling.Models.ViewModels;
@using Birk.Client.Bestilling.Services.Interfaces;
@using Birk.Client.Bestilling.Utils.Constants;
@using System.Text.RegularExpressions;
@inject IBarnService BarnService

<div>
    <div class="buf-row">
        <GenericComponent GuiType=GuiType.Input Placeholder="Fødselsnummer" MaxLength=11 ValueChanged=HandleFnrChanged CssExtra="søk-barn" @ref=_fnrInput />
        <GenericComponent GuiType=GuiType.Button Content="SøkBarnButton" OnClick=HandleSøkBarnButtonClick Disabled=@_isFnrGyldig CssExtra="søk-barn" />
        @foreach (KeyValuePair<string, bool> warning in _warnings)
        {
            if (warning.Value)
            {
                <GenericComponent GuiType=GuiType.Label Content=@($"WarningSize8|{warning.Key}") CssExtra="warning" />
            }
        }
    </div>
</div>


@code {
    [Parameter]
    public EventCallback<BarnViewModel> OnBarnUpdated { get; set; }

    [Parameter]
    public EventCallback OnUkjentFnrClicked { get; set; }

    [Parameter]
    public BarnViewModel Barn { get; set; }

    private GenericComponent _fnrInput;

    private Dictionary<string, bool> _warnings = new();

    private string _fnr = "";
    private bool _isFnrGyldig => _warnings.Any(w => w.Value == true);

    protected override void OnInitialized()
    {
        InitializeWarnings();
    }

    private void InitializeWarnings()
    {
        _warnings.Add("FnrNotNumericValue", false);
        _warnings.Add("FnrNot11DigitsWarning", false);
        _warnings.Add("PersonNotFoundWarning", false);
    }

    private void HandleFnrChanged(string fnr)
    {
        _fnr = fnr;

        _warnings["FnrNot11DigitsWarning"] = false;
        _warnings["PersonNotFoundWarning"] = false;
        _warnings["FnrNotNumericValue"] = !string.IsNullOrEmpty(_fnr) && !Regex.IsMatch(_fnr, "^[0-9]*$");

        StateHasChanged();
    }

    private async Task HandleSøkBarnButtonClick()
    {
        if (_warnings["FnrNotNumericValue"])
        {
            Barn = new() { Fødselsnummer = _fnr };
            OnBarnUpdated.InvokeAsync(Barn);
            return;
        }

        _warnings["FnrNot11DigitsWarning"] = !Regex.IsMatch(_fnr, "^[0-9]{11}$");
        if (_warnings["FnrNot11DigitsWarning"])
        {
            Barn = new() { Fødselsnummer = _fnr };
            OnBarnUpdated.InvokeAsync(Barn);
            return;
        }

        var barn = await BarnService.GetBarnByFnr(_fnr);
        Barn = barn != null ? barn : new() { Fødselsnummer = _fnr };

        _warnings["PersonNotFoundWarning"] = barn == null;


        OnBarnUpdated.InvokeAsync(Barn);
    }
}
