@using Birk.Client.Bestilling.Models.Requests
@using Birk.Client.Bestilling.Services.Implementation
@using Birk.Client.Bestilling.Services.Interfaces
@using Birk.Client.Bestilling.Utils.Constants
@using System.ComponentModel.DataAnnotations

@inject BestillingService BestillingService
@inject IDialogService DialogService

<PageTitle>Henvisning</PageTitle>

<div>
    <MudPaper Class="logg-paper">
        <MudItem Class="top">
            <div style="font-size:4rem;">@Language.Eng[$"{Name}Title"].ToUpper()</div>
            <div style="padding-top:1rem;">@Language.Eng["Logget"]</div>
        </MudItem>        
        <MudDivider />
        <MudItem Class="bottom">
            <u><b>@Language.Eng["Systemstatus"]</b>@String.Format(@Language.Eng["IngenFeilStatus"], Date)</u>
            <MudButton Class="bestilling-button outlined" Id="henvisning-back" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Send" 
                @onclick="BackToMain">
                @Language.Eng["Back"]
            </MudButton>
        </MudItem>
    </MudPaper>

    @foreach(var panel in _panels)
    {
        <Panel PanelModel=@panel />
    }

    <MudItem Class="henvisning-button-item">
        <MudButton Class="bestilling-button filled" id="henvisning-validate" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" 
            @onclick="ValidateAsync">
            @Language.Eng["Validate"]
        </MudButton>
    </MudItem>

</div>


@code {

    [Parameter]
    public EventCallback<int> OnBackToMain { get; set; }

    [Parameter]
    public string Name { get; set; }

    private List<PanelModel> _panels;

    public DateTime Date = DateTime.Now;


    bool success;

    protected override void OnInitialized()
    {
        InitializePanels();
        base.OnInitialized();
    }

    private void InitializePanels()
    {
        if (_panels == null) _panels = new();
        else _panels.Clear();

        var panelNames = Language.Eng[$"{Name}PanelNames"].Split("|");

        foreach (var panelName in panelNames) 
        {
            var panel = new PanelModel(panelName);
            // Structure of the panel, GUIComponents are seraparated with |, GUIComponents properties with ::
            // Ex: Question::0|Description::1 = GUIComponent Question index 0 and GUIComponent Description index 1
            var components = Language.Eng[$"{Name}{panelName}Structure"].Split("|");
            foreach (var component in components) 
            {
                var properties = component.Split("::");
                panel.AddGUIComponent(properties[0], properties[1]);
            }
            _panels.Add(panel);
        }
    }

    private async Task ValidateAsync()
    {
        var bestillingItemList = await BestillingService.List();

        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<Dialog>(String.Format(Language.Eng["ApiAnswer"], bestillingItemList.Count), options);
    }

    private async Task BackToMain()
    {
        await OnBackToMain.InvokeAsync();
    }
}



           @*<MudContainer Class="main-cards-container" MaxWidth="MaxWidth.False">
        <MudItem Class="main-cards-title" xs="12">
            <div><h2>@Language.Eng["BestillingsChoice"]</h2></div>
            <div>@Language.Eng["BestillingsExplanation"]</div>
        </MudItem>
        <MudGrid Justify="Justify.SpaceAround">
            @{
                var rowNr = 0;
                foreach (var name in _cardNames)
                {
                    <MudItem xs="6" Class="@(rowNr % 2 == 0 ? "main-card-item left" : "main-card-item right")">
                        <BestillingCard Name=@name />
                    </MudItem>
                    rowNr++;
                }
            }
        </MudGrid>
    </MudContainer>
    <MudContainer Class="main-button-container" MaxWidth="MaxWidth.False">
        <MudButton Class="bestilling-button" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send"
                @onclick="OpenBestilling">
            @Language.Eng["Next"]
        </MudButton>
    </MudContainer>*@


     @*                   public class RegisterAccountForm

     RegisterAccountForm model = new RegisterAccountForm();
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }*@