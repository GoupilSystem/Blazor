@page "/"
@page "/bestilling"
@using Birk.Client.Bestilling.Components.Enums;
@using Birk.Client.Bestilling.Components.Panels
@using Birk.Client.Bestilling.Components.Reusable
@using Birk.Client.Bestilling.Models.Dtos;
@using Birk.Client.Bestilling.Services.Implementation;
@using Birk.Client.Bestilling.Services.Interfaces;
@using Birk.Client.Bestilling.Utils.Constants;
@using System.Text.RegularExpressions;
@inject IKodeverkService KodeverkService
@inject IBarnService BarnService
@inject ILogger<Bestilling> Logger

@if (_isLoading)
{
    <div class="buf-page">

        <TopPanel BarnOgPerson=@_barnOgPerson />

        <div class="main-panel">
            <div class="active @(_isHenvisningSelected ? "" : "minimized" )">
                <GenericComponent GuiType=GuiType.Title Content="BestillingstypeTitle" CssExtra="bestillingstype" />
                <DropdownComponent GuiType=GuiType.Dropdown Items=BestillingsTypes OnSelectionChanged=OnBestillingChanged />

                @if (_isHenvisningSelected)
                {
                    <GenericComponent GuiType=GuiType.Title Content="KommuneTitle" />

                    <GenericComponent GuiType=GuiType.Label Content="VelgKommuneLabel|RedStarTopSize8" />
                    <MudAutocomplete T=string Class="buf-dropdown"
                             SearchFunc=SearchKommune
                             ValueChanged=OnKommuneChanged
                             Value=_selectedKommune MaxItems="null"
                             ResetValueOnEmptyText=true
                             CoerceText=true CoerceValue=true @ref=_kommuneDropdown />

                    <GenericComponent GuiType=GuiType.Label Content="VelgBarnevernLabel|RedStarTopSize8" />
                    <MudAutocomplete T=string Class="buf-dropdown"
                             SearchFunc=SearchBvtjeneste
                             ValueChanged=OnBvtjenesteChanged
                             Value=_selectedBvtjeneste MaxItems="null"
                             ResetValueOnEmptyText=true
                             CoerceText=true CoerceValue=true @ref=_bvtjenesteDropdown />

                    @for (int i = 0; i < 2; i++)
                    {
                        <ContactRow ContactType=@(i == 0 ? ContactType.Person : ContactType.Leder) />
                    }

                    <GenericComponent GuiType=GuiType.Title Content="HvemGjelderTitle" />
                    <GenericComponent GuiType=GuiType.Label Content="HvemGjelderLabel" />

                    <GenericComponent GuiType=GuiType.Title Content="SøkBarnTitle" />
                    <GenericComponent GuiType=GuiType.Label Content="SøkBarnLabel" />

                    <SokBarnPanel BarnOgPerson=_barnOgPerson OnBarnUpdated=HandleBarnUpdated
                          OnUkjentFnrClicked=@(() => _showBarnInfoPanel = !_showBarnInfoPanel) />

                    <div class="@(_showBarnInfoPanel ? "panel-show" : "panel-hide")">
                        <BarnInfoPanel />
                    </div>

                    <GenericComponent GuiType=GuiType.Title Content="MerknadLabel" />
                    <GenericComponent GuiType=GuiType.TextArea Placeholder="Merknad" ValueChanged=HandleMerknadChanged CssExtra="merknad"/>

                    <div class="registrer-panel">
                        <GenericComponent GuiType=GuiType.Button Content="Registrer" OnClick=HandleRegistrerButtonClick CssExtra ="registrer" />
                    </div>
                }
            </div>
            <div class="footer" />
        </div>

    </div>
}

@code {

    protected async override Task OnInitializedAsync()
    {
        await InitializeDropdownsAsync();

        base.OnInitialized();
    }

    // Public for tests
    public string[] BestillingsTypes { get; set; }
    public string[] Kommunes { get; set; }
    public string[] Bvtjenestes { get; set; }

    private MudAutocomplete<string> _kommuneDropdown;
    private MudAutocomplete<string> _bvtjenesteDropdown;

    private BarnOgPersonDto _barnOgPerson = new();

    private string _selectedBestilling = null;
    private string _selectedKommune = null;
    private string _selectedBvtjeneste = null;

    private bool _isLoading;
    private bool _isHenvisningSelected;
    private bool _isKommunesAndBvtjenestesSet;
    private bool _selectBvtjenesteWhenNoKommune;
    private bool _showBarnInfoPanel;

    public async Task InitializeDropdownsAsync()
    {
        Logger.LogInformation("Entering {Method}", nameof(InitializeDropdownsAsync));

        BestillingsTypes = await KodeverkService.GetTypes();
        _isLoading = true;

        Logger.LogInformation("Exiting {Method}", nameof(InitializeDropdownsAsync));
    }

    private async Task OnBestillingChanged(string selectedBestilling)
    {
        _selectedBestilling = selectedBestilling;
        _isHenvisningSelected = BestillingsTypes.FirstOrDefault() == _selectedBestilling;

        if (_isHenvisningSelected)
        {
            if (!_isKommunesAndBvtjenestesSet)
            {
                await KodeverkService.GetKommunesAndBvtjenestes();
                _isKommunesAndBvtjenestesSet = true;
            }
            Kommunes = KodeverkService.GetKommunes();
            Bvtjenestes = KodeverkService.GetBvtjenestesByKommunenavn("");
        }
        else
        {
            Kommunes = null;
            Bvtjenestes = null;
        }

        StateHasChanged();
    }

    private async Task OnKommuneChanged(string value)
    {
        _selectedKommune = value;

        // If no kommune is selected, all bvtjenestes are available
        if (string.IsNullOrEmpty(_selectedKommune))
        {
            Bvtjenestes = KodeverkService.GetBvtjenestesByKommunenavn(_selectedKommune);
        }
        else
        {
            Bvtjenestes = KodeverkService.GetBvtjenestesByKommunenavn(_selectedKommune);
            // Displays automatically the only possible item or nothing if more than one
            _selectedBvtjeneste = Bvtjenestes.Length == 1 ? Bvtjenestes[0] : null;
            _bvtjenesteDropdown.Value = _selectedBvtjeneste;
            _bvtjenesteDropdown.Text = _selectedBvtjeneste;
        }
    }

    private async Task OnBvtjenesteChanged(string value)
    {
        _selectedBvtjeneste = value;

        // If we select a barneverntjeneste while no kommune selected,
        // we set automatically the matching selected Kommune
        if (string.IsNullOrEmpty(_selectedKommune))
        {
            var matchingKommuneIndex = KodeverkService.GetKommuneIndexByBvtjeneste(_selectedBvtjeneste);

            if (matchingKommuneIndex != -1)
            {
                // Update the items in the Kommune dropdown
                _selectedKommune = Kommunes[matchingKommuneIndex];
                _kommuneDropdown.Value = _selectedKommune;
                _kommuneDropdown.Text = _selectedKommune;
            }
        }
    }

    private async Task<IEnumerable<string>> SearchKommune(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value) || _selectedKommune == value)
        {
            return Kommunes;
        }

        return Kommunes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchBvtjeneste(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value) || _selectedBvtjeneste == value)
        {
            return Bvtjenestes;
        }

        return Bvtjenestes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void HandleBarnUpdated(BarnOgPersonDto barnOgPerson)
    {
        _barnOgPerson = barnOgPerson;
    }

    private void HandleMerknadChanged(string value)
    {
        // 18/04: coming code in the next US
    }

    private void HandleRegistrerButtonClick()
    {
        // 18/04: coming code in the next US
    }
}