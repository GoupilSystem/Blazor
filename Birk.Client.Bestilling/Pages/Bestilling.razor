@page "/"
@page "/bestilling"
@using Birk.Client.Bestilling.Components.Enums;
@using Birk.Client.Bestilling.Components.Panels
@using Birk.Client.Bestilling.Components.Reusable
@using Birk.Client.Bestilling.Models.Dtos;
@using Birk.Client.Bestilling.Services.Implementation;
@using Birk.Client.Bestilling.Services.Interfaces;
@using Birk.Client.Bestilling.Utils.Constants;
@using Birk.Client.Bestilling.Utils.Helpers;
@using System.Text.RegularExpressions;
@inject IKodeverkService KodeverkService
@inject IBarnService BarnService
@inject ILogger<Bestilling> Logger

@if (_isLoading)
{
    <div class="buf-page">
        
        <InfoPanel BarnOgPerson=@_barnOgPerson />

        <div class="main-panel">
            <div class="active @(_isHenvisningSelected ? "" : "minimized" )">
                <GenericComponent GuiType=@GuiType.Title Items=@(new[] { Language.NO["BestillingstypeTitle"] }) CssExtra="bestillingstype" />
                <DropdownComponent GuiType=@GuiType.Dropdown Items=_bestillingTypes OnSelectionChanged=@OnBestillingDropdownSelectionChanged />

                @if (_isHenvisningSelected)
                {
                    <GenericComponent GuiType=@GuiType.Title Items=@(new[] { Language.NO["KommuneTitle"] }) />
                    <GenericComponent GuiType=@GuiType.Label Items=@(new[] { @Language.NO["VelgKommuneLabel"] }) />
                    <DropdownComponent GuiType=@GuiType.Dropdown Items=_kommunes OnSelectionChanged=@OnKommuneDropdownSelectionChanged />
                    <GenericComponent GuiType=@GuiType.Label Items=@(new[] { Language.NO["VelgBarnevernLabel"] }) />
                    <DropdownComponent GuiType=@GuiType.Dropdown Items=_barnOgPersoneverntjenestes @ref="_barnOgPersoneverntjenesteDropdown" />

                    @for (int i = 0; i < 2; i++)
                    {
                        <ContactRow ContactType=@(i == 0 ? ContactType.Person : ContactType.Leder) />
                    }

                    <GenericComponent GuiType=@GuiType.Title Items=@(new[] { Language.NO["HvemGjelderTitle"] }) />
                    <GenericComponent GuiType=@GuiType.Label Items=@(new[] { Language.NO["HvemGjelderLabel"] }) />

                    <GenericComponent GuiType=@GuiType.Title Items=@(new[] { Language.NO["SøkBarnTitle"] }) />
                    <GenericComponent GuiType=@GuiType.Label Items=@(new[] { Language.NO["SøkBarnLabel"] }) />

                    <div style="display: flex; flex-direction: row;">

                    <GenericComponent GuiType="@GuiType.Input" Placeholder='@(StringHelper.BuildPlaceholder(Language.NO["FødselsnummerPlaceholder"]))'
                        ValueChanged="@HandleFnrChanged" />
                    <GenericComponent GuiType=@GuiType.Button Items=@(new[] { Language.NO["SøkBarnButton"] }) OnClick=@HandleSøkBarnButtonClick CssExtra="søkbarn" />

                    @if (_fnrNotNumericWarning)
                    {
                        <div style="display: flex; flex-direction: row; align-items: center; margin-left: 5px; color: var(--buf-red); font-family: Arial; font-size: var(--font-size-12px);">
                            <i class="fas fa-exclamation-circle"></i>
                            <span>@Language.NO["SøkBarnFnrNotNumeric"]</span>
                        </div>
                    }
                    else if (_fnrNot11DigitsWarning)
                    {
                        <div style="display: flex; flex-direction: row; align-items: center; margin-left: 5px; color: var(--buf-red); font-family: Arial; font-size: var(--font-size-12px);">
                            <i class="fas fa-exclamation-circle"></i>
                            <span>@Language.NO["SøkBarnFnrNot11Digits"]</span>
                        </div>
                    }
                    else if (_personNotFoundWarning)
                    {
                        <div style="display: flex; flex-direction: row; align-items: center; margin-left: 5px; color: var(--buf-red); font-family: Arial; font-size: var(--font-size-12px);">
                            <i class="fas fa-exclamation-circle"></i>
                                <span>@Language.NO["SøkBarnFnrNotFound"]</span>
                        </div>
                    }
                    
                    </div>
                }
            </div>
            <div class="footer" />
        </div>

    </div>
}

@code {
    private DropdownComponent _barnOgPersoneverntjenesteDropdown;

    public string[] _bestillingTypes;
    public string[] _kommunes;
    public string[] _barnOgPersoneverntjenestes;

    private BarnOgPersonDto _barnOgPerson = new();

    private string _selectedBestilling = null;
    private string _selectedKommune = null;
    private string _selectedBernverntjeneste = null;

    private bool _isLoading;
    private bool _isHenvisningSelected;
    private bool _isKommunesAndBarneverntjenestesSet;

    private string _fnr;
    private bool _fnrNotNumericWarning => !string.IsNullOrEmpty(_fnr) && !Regex.IsMatch(_fnr, "^[0-9]*$");
    private bool _fnrNot11DigitsWarning;
    private bool _personNotFoundWarning;

    protected async override Task OnInitializedAsync()
    {
        await InitializeDropdowns();
        base.OnInitialized();
    }

    public async Task InitializeDropdowns()
    {
        Logger.LogInformation("Entering {Method}", nameof(InitializeDropdowns));

        _bestillingTypes = await KodeverkService.GetTypes();
        _isLoading = true;

        Logger.LogInformation("Exiting {Method}", nameof(InitializeDropdowns));
    }

    private async Task OnBestillingDropdownSelectionChanged(string selectedBestilling)
    {
        _selectedBestilling = selectedBestilling;
        _isHenvisningSelected = _bestillingTypes.FirstOrDefault() == _selectedBestilling;

        if (_isHenvisningSelected)
        {
            if (!_isKommunesAndBarneverntjenestesSet)
            {
                await KodeverkService.GetKommunesAndBarneverntjenestes();
                _isKommunesAndBarneverntjenestesSet = true;
            }
            _kommunes = KodeverkService.GetKommunes();
            _barnOgPersoneverntjenestes = KodeverkService.GetBarneverntjenestesByKommunenavn("");

        }
        else
        {
            _kommunes = null;
            _barnOgPersoneverntjenestes = null;
        }

        StateHasChanged();
    }

    private async Task OnKommuneDropdownSelectionChanged(string selectedKommune)
    {
        _selectedKommune = selectedKommune;
        _barnOgPersoneverntjenestes = KodeverkService.GetBarneverntjenestesByKommunenavn(_selectedKommune);

        _barnOgPersoneverntjenesteDropdown.ResetSelection();

        StateHasChanged();
    }

    private void HandleFnrChanged(string value)
    {
        if (_fnrNot11DigitsWarning) _fnrNot11DigitsWarning = false;
        if (_personNotFoundWarning) _personNotFoundWarning = false;

        _fnr = value;
    }

    private async Task HandleSøkBarnButtonClick()
    {
        if (!_fnrNotNumericWarning)
        {
            _fnrNot11DigitsWarning = !Regex.IsMatch(_fnr, "^[0-9]{11}$");
            if (_fnrNot11DigitsWarning) return;

            _barnOgPerson = await BarnService.GetBarnByFnr(_fnr);

            if (_barnOgPerson == null)
            {
                _personNotFoundWarning = true;
            }
            else
            {
                _personNotFoundWarning = false;
            }
        }
        else
        {
            _personNotFoundWarning = false;
        }
    }
}