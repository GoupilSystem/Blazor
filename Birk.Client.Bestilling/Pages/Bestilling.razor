@page "/"
@page "/bestilling"
@using Birk.Client.Bestilling.Components.Enums;
@using Birk.Client.Bestilling.Components.Panels
@using Birk.Client.Bestilling.Components.Reusable
@using Birk.Client.Bestilling.Models.Dtos;
@using Birk.Client.Bestilling.Services.Implementation;
@using Birk.Client.Bestilling.Services.Interfaces;
@using Birk.Client.Bestilling.Utils.Constants;
@using Birk.Client.Bestilling.Utils.Helpers;
@using System.Text.RegularExpressions;
@inject IKodeverkService KodeverkService
@inject IBarnService BarnService
@inject ILogger<Bestilling> Logger

@if (_isLoading)
{
    <div class="buf-page">

        <InfoPanel BarnOgPerson=@_barnOgPerson />

        <div class="main-panel">
            <div class="active @(_isHenvisningSelected ? "" : "minimized" )">
                <GenericComponent GuiType=@GuiType.Title Items=@(new[] { Language.NO["BestillingstypeTitle"] }) CssExtra="bestillingstype" />
                <DropdownComponent GuiType=@GuiType.Dropdown Items=BestillingsTypes OnSelectionChanged=@OnBestillingDropdownSelectionChanged />

                @if (_isHenvisningSelected)
                {
                    <GenericComponent GuiType=@GuiType.Title Items=@(new[] { Language.NO["KommuneTitle"] }) />
                    <GenericComponent GuiType=@GuiType.Label Items=@(new[] { Language.NO["VelgKommuneLabel"] + Language.NO["RedStarTopSize8"] }) />
                    <DropdownComponent GuiType=@GuiType.Dropdown Items=Kommunes OnSelectionChanged=@OnKommuneDropdownSelectionChanged
                        @ref="_kommuneDropdown" />
                    <GenericComponent GuiType=@GuiType.Label Items=@(new[] { Language.NO["VelgBarnevernLabel"] + Language.NO["RedStarTopSize8"] }) />
                    <DropdownComponent GuiType=@GuiType.Dropdown Items=Bvtjenestes 
                        @ref="_btDropdown" />
                    @*OnSelectionChanged = @OnBarneverntjenesteDropdownSelectionChanged*@

                    @for (int i = 0; i < 2; i++)
                    {
                        <ContactRow ContactType=@(i == 0 ? ContactType.Person : ContactType.Leder) />
                    }

                    <GenericComponent GuiType=@GuiType.Title Items=@(new[] { Language.NO["HvemGjelderTitle"] }) />
                    <GenericComponent GuiType=@GuiType.Label Items=@(new[] { Language.NO["HvemGjelderLabel"] }) />

                    <GenericComponent GuiType=@GuiType.Title Items=@(new[] { Language.NO["SøkBarnTitle"] }) />
                    <GenericComponent GuiType=@GuiType.Label Items=@(new[] { Language.NO["SøkBarnLabel"] }) />

                    <SokBarn BarnOgPerson="_barnOgPerson" OnBarnUpdated="@HandleBarnUpdated" />
                }
            </div>
            <div class="footer" />
        </div>

    </div>
}

@code {
    // Public for tests
    public string[] BestillingsTypes { get; set; }
    public string[] Kommunes { get; set; }
    public string[] Bvtjenestes { get; set; }

    private DropdownComponent _kommuneDropdown;
    private DropdownComponent _btDropdown;

    private BarnOgPersonDto _barnOgPerson = new();

    private string _selectedBestilling = null;
    private string _selectedKommune = null;
    private string _selectedBvtjeneste = null;

    private bool _isLoading;
    private bool _isHenvisningSelected;
    private bool _isKommunesAndBvtjenestesSet;
    private bool _selectBvtjenesteWhenNoKommune;

    protected async override Task OnInitializedAsync()
    {
        await InitializeDropdownsAsync();

        base.OnInitialized();
    }

    public async Task InitializeDropdownsAsync()
    {
        Logger.LogInformation("Entering {Method}", nameof(InitializeDropdownsAsync));

        BestillingsTypes = await KodeverkService.GetTypes();
        _isLoading = true;

        Logger.LogInformation("Exiting {Method}", nameof(InitializeDropdownsAsync));
    }

    private async Task OnBestillingDropdownSelectionChanged(string selectedBestilling)
    {
        _selectedBestilling = selectedBestilling;
        _isHenvisningSelected = BestillingsTypes.FirstOrDefault() == _selectedBestilling;

        if (_isHenvisningSelected)
        {
            if (!_isKommunesAndBvtjenestesSet)
            {
                await KodeverkService.GetKommunesAndBvtjenestes();
                _isKommunesAndBvtjenestesSet = true;
            }
            Kommunes = KodeverkService.GetKommunes();
            Bvtjenestes = KodeverkService.GetBvtjenestesByKommunenavn("");
        }
        else
        {
            Kommunes = null;
            Bvtjenestes = null;
        }

        StateHasChanged();
    }

    private async Task OnKommuneDropdownSelectionChanged(string selectedKommune)
    {
        // If OnKommuneDropdownSelectionChanged() is called from OnBarneverntjenesteDropdownSelectionChanged
        // We don't have to re-update Barnverntjenestedropdown
        if (_selectBvtjenesteWhenNoKommune)
        {
            _selectBvtjenesteWhenNoKommune = false;
        }
        // Otherwise OnKommuneDropdownSelectionChanged() is called from a item change in KommuneDropdown,
        // we update the items in the Barneverntjeneste dropdown
        else
        {
            _selectedKommune = selectedKommune;
            Bvtjenestes = KodeverkService.GetBvtjenestesByKommunenavn(_selectedKommune);
            _btDropdown.Items = Bvtjenestes;
            // Displays automaticaly the only possible item or nothing if more than one
            _btDropdown.SetSelected();
            StateHasChanged();
        }
    }

    private async Task OnBarneverntjenesteDropdownSelectionChanged(string selectedBarneverntjeneste)
    {
        // If no selecte kommune, chosing an barneverntjeneste automatically sets kommune dropdown to the right item
        if (string.IsNullOrEmpty(_selectedKommune))
        {
            _selectBvtjenesteWhenNoKommune = true;

            _selectedBvtjeneste = selectedBarneverntjeneste;
            var matchingKommuneIndex = KodeverkService.GetKommuneIndexByBvtjeneste(selectedBarneverntjeneste);

            if (matchingKommuneIndex != -1)
            {
                // Update the items in the Kommune dropdown
                _kommuneDropdown.SetSelected(matchingKommuneIndex);
            }

            StateHasChanged();
        }
    }

    private void HandleBarnUpdated(BarnOgPersonDto barnOgPerson)
    {
        _barnOgPerson = barnOgPerson;
    } 

}