@page "/"
@page "/bestilling"
@using Birk.Client.Bestilling.Components
@using Birk.Client.Bestilling.Components.Enums;
@using Birk.Client.Bestilling.Components.Reusable
@using Birk.Client.Bestilling.Services.Implementation;
@using Birk.Client.Bestilling.Services.Interfaces;
@using Birk.Client.Bestilling.Utils.Constants;
@inject IBestillingService BestillingService
@inject ILogger<Bestilling> Logger

<div class="buf-page">
    <div class="top-panel">
        <div class="top-row">
            <div>BIRK-ID:</div>
            <div>Kjønn:</div>
        </div>
        <div class="top-row">
            <div>Fødselsdato:</div>
            <div>Alder:</div>
        </div>
    </div>

    <div class="main-panel">
        <div class="active">
            <DropdownComponent GuiType=@GuiType.Dropdown Items=_bestillingTypes OnSelectionChanged=@OnBestillingDropdownSelectionChanged />

            @if (_isHenvisningSelected)
            {
                <GenericComponent GuiType=@GuiType.Title Items=@(new string[] { Language.NO["KommuneTitle"] }) />
                <GenericComponent GuiType=@GuiType.Label Items=@(new string[] { @Language.NO["VelgKommuneLabel"] }) />
                <DropdownComponent GuiType=@GuiType.Dropdown Items=_kommunes OnSelectionChanged=@OnKommuneDropdownSelectionChanged />
                <GenericComponent GuiType=@GuiType.Label Items=@(new string[] { Language.NO["VelgBarnevernLabel"] }) />
                <DropdownComponent GuiType=@GuiType.Dropdown Items=_barneverntjenestes />

                @for (int i = 0; i < 2; i++)
                {
                    <ContactRow ContactType=@(i == 0 ? ContactType.Person : ContactType.Leder) />
                }

                <GenericComponent GuiType=@GuiType.Title Items=@(new string[] { Language.NO["HvemGjelderTitle"] }) />
                <GenericComponent GuiType=@GuiType.Label Items=@(new string[] { Language.NO["HvemGjelderLabel"] }) />
            }
        </div>
        <div class="footer" />
    </div>
    
</div>

@code {

    public string[] _bestillingTypes;
    public string[] _kommunes;
    public string[] _barneverntjenestes;

    private string _selectedBestilling = null;
    private string _selectedKommune = null;

    private bool _isHenvisningSelected;
    private bool _isKommunesAndBarneverntjenestesSet = false;

    protected async override Task OnInitializedAsync()
    {
        await InitializeGUI();
        base.OnInitialized();
    }

    public async Task InitializeGUI()
    {
        Logger.LogInformation("Entering {Method}", nameof(InitializeGUI));

        _bestillingTypes = await BestillingService.GetTypes();        

        Logger.LogInformation("Exiting {Method}", nameof(InitializeGUI));
    }

    private async Task OnBestillingDropdownSelectionChanged(string selectedBestilling)
    {
        _selectedBestilling  = selectedBestilling;
        _isHenvisningSelected = _bestillingTypes.FirstOrDefault() == _selectedBestilling ;

        if (_isHenvisningSelected)
        {
            if (!_isKommunesAndBarneverntjenestesSet)
            {
                await BestillingService.GetKommunesAndBarneverntjenestes();
                _isKommunesAndBarneverntjenestesSet = true;
            }
            _kommunes = BestillingService.GetKommunes();
        }
        else
        {
            _kommunes = null;
            _barneverntjenestes = null;
        }

        StateHasChanged();
    }

    private async Task OnKommuneDropdownSelectionChanged(string selectedKommune)
    {
        _selectedKommune = selectedKommune;
        _barneverntjenestes = BestillingService.GetBarneverntjenestesByKommunenavn(_selectedKommune);

        StateHasChanged();
    }
}