@page "/"
@page "/bestilling"
@using Birk.Client.Bestilling.Components.Enums;
@using Birk.Client.Bestilling.Components.Panels
@using Birk.Client.Bestilling.Components.Reusable
@using Birk.Client.Bestilling.Models.Dtos;
@using Birk.Client.Bestilling.Services.Implementation;
@using Birk.Client.Bestilling.Services.Interfaces;
@using Birk.Client.Bestilling.Utils.Constants;
@using Birk.Client.Bestilling.Utils.Helpers;
@using System.Text.RegularExpressions;
@inject IKodeverkService KodeverkService
@inject IBarnService BarnService
@inject ILogger<Bestilling> Logger

@if (_isLoading)
{
    <div class="buf-page">

        <InfoPanel BarnOgPerson=@_barnOgPerson />

        <div class="main-panel">
            <div class="active @(_isHenvisningSelected ? "" : "minimized" )">
                <GenericComponent GuiType=@GuiType.Title Items=@(new[] { Language.NO["BestillingstypeTitle"] }) CssExtra="bestillingstype" />
                <DropdownComponent GuiType=@GuiType.Dropdown Items=BestillingsTypes OnSelectionChanged=@OnBestillingDropdownSelectionChanged />

                @if (_isHenvisningSelected)
                {
                    <GenericComponent GuiType=@GuiType.Title Items=@(new[] { Language.NO["KommuneTitle"] }) />
                    <GenericComponent GuiType=@GuiType.Label Items=@(new[] { Language.NO["VelgKommuneLabel"] + Language.NO["RedStarTopSize8"] }) />
                    <DropdownComponent GuiType=@GuiType.Dropdown Items=Kommunes 
                        OnSelectionChanged=@OnKommuneDropdownSelectionChanged
                        @ref="_kommuneDropdown" />
                    <GenericComponent GuiType=@GuiType.Label Items=@(new[] { Language.NO["VelgBarnevernLabel"] + Language.NO["RedStarTopSize8"] }) />
                    <DropdownComponent GuiType=@GuiType.Dropdown Items=Bvtjenestes
                        OnSelectionChanged=@OnBvtjenesteDropdownSelectionChanged
                               @ref="_bvtjenesteDropdown" />

                    <MudAutocomplete T="string" Class="buf-dropdown" 
                            SearchFunc=TrySearchKommune
                            ValueChanged=OnTryKommuneDropdownSelectionChanged
                             Value=selectedTryKommune MaxItems="null"
                             ResetValueOnEmptyText=true
                             CoerceText=true CoerceValue=true @ref=tryKommuneDropdown/>

                    <MudAutocomplete T="string" Class="buf-dropdown" SearchFunc=TrySearchBarn
                             ValueChanged=OnTryBarnDropdownSelectionChanged
                             Value=selectedTryBarn MaxItems="null"
                             ResetValueOnEmptyText=true
                             CoerceText=true CoerceValue=true @ref=tryBarnDropdown/>
                    
                    @for (int i = 0; i < 2; i++)
                    {
                        <ContactRow ContactType=@(i == 0 ? ContactType.Person : ContactType.Leder) />
                    }

                    <GenericComponent GuiType=@GuiType.Title Items=@(new[] { Language.NO["HvemGjelderTitle"] }) />
                    <GenericComponent GuiType=@GuiType.Label Items=@(new[] { Language.NO["HvemGjelderLabel"] }) />

                    <GenericComponent GuiType=@GuiType.Title Items=@(new[] { Language.NO["SøkBarnTitle"] }) />
                    <GenericComponent GuiType=@GuiType.Label Items=@(new[] { Language.NO["SøkBarnLabel"] }) />

                    <SokBarn BarnOgPerson="_barnOgPerson" OnBarnUpdated="@HandleBarnUpdated" />
                }
            </div>
            <div class="footer" />
        </div>

    </div>
}

@code {

    private MudAutocomplete<string> tryBarnDropdown;
    private MudAutocomplete<string> tryKommuneDropdown;
    private string selectedTryKommune = "";
    private string[] tryKommunes = new[]
    {
        "kommune1",
        "kommune2",
        "kommune3",
        "kommune4",
        "kommune5"
    };

    private string selectedTryBarn = "";
    private string[] totalBarns = new[]
    {
        "barn1kommune1", "barn2kommune1", "barn3kommune1", "barn4kommune1",
        "barn1kommune2", "barn2kommune2", "barn3kommune2",
        "barn1kommune3", "barn1kommune4",
        "barn1kommune5", "barn2kommune5"
    };
    private string[] tryBarns = new[] { "" };

    private async Task<IEnumerable<string>> TrySearchKommune(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value) || selectedTryKommune == value)
        {
            return tryKommunes;
        }

        return tryKommunes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnTryKommuneDropdownSelectionChanged(string value)
    {
        selectedTryKommune = value;
        // If no kommune is selected, all bvtjenestes are available
        if (string.IsNullOrEmpty(selectedTryKommune))
        {
            tryBarns = totalBarns;
        }
        else
        {
            tryBarns = totalBarns.Where(b => b.Contains(selectedTryKommune)).ToArray();
            // Displays automatically the only possible item or nothing if more than one
            selectedTryBarn = tryBarns.Length == 1 ? tryBarns[0] : null;
            tryBarnDropdown.Value = selectedTryBarn;
            tryBarnDropdown.Text = selectedTryBarn;
        }
    }

    private async Task OnTryBarnDropdownSelectionChanged(string value)
    {
        selectedTryBarn = value;

        if (string.IsNullOrEmpty(selectedTryKommune))
        {
            _selectBvtjenesteWhenNoKommune = true;

            var matchingKommuneIndex = GetKommuneIndexByBarn(selectedTryBarn);

            if (matchingKommuneIndex != -1)
            {
                // Update the items in the Kommune dropdown
                selectedTryKommune = tryKommunes[matchingKommuneIndex];
                tryKommuneDropdown.Value = selectedTryKommune;
                tryKommuneDropdown.Text = selectedTryKommune;
            }
        }
    }

    private async Task<IEnumerable<string>> TrySearchBarn(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value) || selectedTryBarn == value)
        {
            return tryBarns;
        }

        return tryBarns.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    public int GetKommuneIndexByBarn(string selectedBarn)
    {
        if (tryBarns == null)
        {
            return -1;
        }
        var indexOfKommune = selectedBarn.IndexOf("kommune");
        var kommuneInBarn = selectedBarn.Substring(indexOfKommune);
        foreach (var kommune in tryKommunes)
        {            
            if (kommune == kommuneInBarn)
            {
                return Array.IndexOf(tryKommunes, kommune);
            }
        }

        return -1;
    }

    protected async override Task OnInitializedAsync()
    {
        tryBarns = (string[])totalBarns.Clone();

        await InitializeDropdownsAsync();

        base.OnInitialized();
    }

    // Public for tests
    public string[] BestillingsTypes { get; set; }
    public string[] Kommunes { get; set; }
    public string[] Bvtjenestes { get; set; }

    private DropdownComponent _kommuneDropdown;
    private DropdownComponent _bvtjenesteDropdown;
    private ElementReference _kommuneDropdownRef;
    private ElementReference _bvtjenesteDropdownRef;

    private BarnOgPersonDto _barnOgPerson = new();

    private string _selectedBestilling = null;
    private string _selectedKommune = null;
    private string _selectedBvtjeneste = null;

    private bool _isLoading;
    private bool _isHenvisningSelected;
    private bool _isKommunesAndBvtjenestesSet;
    private bool _selectBvtjenesteWhenNoKommune;

    

    public async Task InitializeDropdownsAsync()
    {
        Logger.LogInformation("Entering {Method}", nameof(InitializeDropdownsAsync));

        BestillingsTypes = await KodeverkService.GetTypes();
        _isLoading = true;

        Logger.LogInformation("Exiting {Method}", nameof(InitializeDropdownsAsync));
    }

    private async Task OnBestillingDropdownSelectionChanged(string selectedBestilling)
    {
        _selectedBestilling = selectedBestilling;
        _isHenvisningSelected = BestillingsTypes.FirstOrDefault() == _selectedBestilling;

        if (_isHenvisningSelected)
        {
            if (!_isKommunesAndBvtjenestesSet)
            {
                await KodeverkService.GetKommunesAndBvtjenestes();
                _isKommunesAndBvtjenestesSet = true;
            }
            Kommunes = KodeverkService.GetKommunes();
            Bvtjenestes = KodeverkService.GetBvtjenestesByKommunenavn("");
        }
        else
        {
            Kommunes = null;
            Bvtjenestes = null;
        }

        StateHasChanged();
    }

    private async Task OnKommuneDropdownSelectionChanged(string selectedKommune)
    {
        // If OnKommuneDropdownSelectionChanged() is called from OnBarneverntjenesteDropdownSelectionChanged
        // We don't have to re-update Barnverntjenestedropdown
        if (_selectBvtjenesteWhenNoKommune)
        {
            _selectBvtjenesteWhenNoKommune = false;
        }
        // Otherwise OnKommuneDropdownSelectionChanged() is called from a item change in KommuneDropdown,
        // we update the items in the Barneverntjeneste dropdown
        else
        {
            _selectedKommune = selectedKommune;
            Bvtjenestes = KodeverkService.GetBvtjenestesByKommunenavn(_selectedKommune);
            _bvtjenesteDropdown.Items = Bvtjenestes;

            // Displays automaticaly the only possible item or nothing if more than one
            _bvtjenesteDropdown.SelectedBestilling = Bvtjenestes[0];

            
        }
    }

    private async Task OnBvtjenesteDropdownSelectionChanged(string selectedBarneverntjeneste)
    {
        //// If no selecte kommune, chosing an barneverntjeneste automatically sets kommune dropdown to the right item
        if (string.IsNullOrEmpty(_selectedKommune))
        {
            _selectBvtjenesteWhenNoKommune = true;

            _selectedBvtjeneste = selectedBarneverntjeneste;
            var matchingKommuneIndex = KodeverkService.GetKommuneIndexByBvtjeneste(selectedBarneverntjeneste);

            if (matchingKommuneIndex != -1)
            {
                // Update the items in the Kommune dropdown
                _kommuneDropdown.SetSelected(matchingKommuneIndex);
            }
        }
        StateHasChanged();
    }

    private void HandleBarnUpdated(BarnOgPersonDto barnOgPerson)
    {
        _barnOgPerson = barnOgPerson;
    } 

}