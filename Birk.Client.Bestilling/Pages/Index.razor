@page "/index"

<PageTitle>Registrer bestilling</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h6"  GutterBottom="true">Bestilling</MudText>
    </MudItem>
    
     <MudItem xs="7" md="6">
        <MudRadioGroup @bind-SelectedOption="@SelectedType">
            <MudRadio Color="Color.Primary" Option="@("H")">Henvisning</MudRadio>
            <MudRadio Color="Color.Primary" Option="@("P")">Plassering på grunnlag av vedtak</MudRadio>
            <MudRadio Color="Color.Primary" Option="@("S")">Søknad om annen bistand</MudRadio>
            <MudRadio Color="Color.Primary" Option="@("He")">Henvisning, ufødt barn</MudRadio>
            <MudRadio Color="Color.Primary" Option="@("M")">Muntlig henvendelse, ikke-registrert barn</MudRadio>
        </MudRadioGroup>
            
    </MudItem>
    <MudItem xs="12">
            <MudSpacer/>
            <MudDivider DividerType="DividerType.FullWidth" Class="my-6"/>
            <MudSpacer/>
    </MudItem>
    <MudItem xs="12">
            <MudText Typo="Typo.h6">Ansvarlig kommune</MudText>
    </MudItem>
    <MudItem xs="7">
        <MudGrid>            
            <MudItem xs="12">
                <MudAutocomplete T="string" Required=true Label="Kommune" @bind-Value="value1" SearchFunc="@Search1"
                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                 CoerceText="@coerceText" CoerceValue="@coerceValue" />
            </MudItem>
            <MudItem xs="12">
                <MudAutocomplete T="string" Required=true Label="Inntaksenhet" @bind-Value="value2" SearchFunc="@Search2"
                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                 CoerceText="@coerceText" CoerceValue="@coerceValue" />
            </MudItem>
            <MudItem xs="12">
                <MudAutocomplete T="string" Required=true Label="Barnevernstjeneste" @bind-Value="value2" SearchFunc="@Search2"
                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                 CoerceText="@coerceText" CoerceValue="@coerceValue" />
            </MudItem>

        </MudGrid>
    </MudItem>
</MudGrid>



@code {
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value1, value2;

    public string SelectedType { get; set; }


    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> Search1(string value)
    {
    // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

    // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


}